@model TwitchStreamAnalyser.Models.TwitchData
@{
    var viewersLabel = Model.Viewers == 1 ? "Viewer" : "Viewers";
    var clipsLabel = Model.Clips == 1 ? "Clip" : "Clips";
    var viewsLabel = Model.ChannelViews == 1 ? "View" : "Views";
    var followLabel = Model.ChannelFollowers == 1 ? "Follower" : "Followers";
}

<table>
    <tr>
        <td><i class="fas fa-user fa-fw"></i></td>
        <td>@Html.DisplayFor(m => m.Viewers) @viewersLabel</td>
    </tr>
    <tr id="stream-run" class="offline">
        <td><i class="far fa-clock fa-fw"></i></td>
        <td id="runtime">--</td>
    </tr>

    <tr>
        <td><i class="fas fa-film fa-fw"></i></td>
        <td>@Html.DisplayFor(m => m.Clips) @clipsLabel</td>
    </tr>

    <tr>
        <td><i class="far fa-eye fa-fw"></i></td>
        <td>@Html.DisplayFor(m => m.ChannelViews) @viewsLabel</td>
    </tr>
    <tr>
        <td><i class="fas fa-users fa-fw"></i></td>
        <td>@Html.DisplayFor(m => m.ChannelFollowers) @followLabel</td>
    </tr>

    @if (!string.IsNullOrWhiteSpace(Model.NowPlaying))
    {
        <tr>
            <td><i class="fas fa-music"></i></td>
            <td>@Html.DisplayFor(m => m.NowPlaying)</td>
        </tr>
    }

</table>

<script src="~/js/runtime_manager.js"></script>
<script>
    $(document).ready(function () {
        var streamDateTime = Date.parse('@Model.StreamStartDateTime');

        $('#runtime').text(calculateStreamRuntime(streamDateTime, Date.now()));
        $("#stream-run").removeClass("offline");

        setTimeout(updateStreamRuntime, 1000, streamDateTime);
    });
</script>